{"meta":{"title":"Hexo","subtitle":"","description":"","author":"mudan","url":"http://atommudan.cn","root":"/"},"pages":[{"title":"about","date":"2021-10-31T16:00:00.000Z","updated":"2021-11-08T08:08:59.623Z","comments":false,"path":"about/index.html","permalink":"http://atommudan.cn/about/index.html","excerpt":"","text":"木旦的小屋 与&nbsp; cungduafa&nbsp; （ 真（ま）白（しろ） ） 对话中... bot_ui_ini()"},{"title":"分类","date":"2021-09-30T16:00:00.000Z","updated":"2021-11-08T07:58:20.461Z","comments":false,"path":"categories/index.html","permalink":"http://atommudan.cn/categories/index.html","excerpt":"","text":""},{"title":"留言板","date":"2021-10-31T16:00:00.000Z","updated":"2021-11-08T08:27:10.805Z","comments":true,"path":"conmment/index.html","permalink":"http://atommudan.cn/conmment/index.html","excerpt":"","text":"有什么想说的? 有什么想问的?"},{"title":"links","date":"2021-10-31T16:00:00.000Z","updated":"2021-11-08T08:29:34.758Z","comments":true,"path":"links/index.html","permalink":"http://atommudan.cn/links/index.html","excerpt":"","text":""},{"title":"tags","date":"2021-10-31T16:00:00.000Z","updated":"2021-11-08T07:59:03.166Z","comments":false,"path":"tags/index.html","permalink":"http://atommudan.cn/tags/index.html","excerpt":"","text":""},{"title":"简历","date":"2021-09-30T16:00:00.000Z","updated":"2021-11-08T13:09:58.759Z","comments":false,"path":"resume/index.html","permalink":"http://atommudan.cn/resume/index.html","excerpt":"","text":"​ ​ ​ hh"}],"posts":[{"title":"剑指 Offer II 003. 前n个数字二进制中1的个数","slug":"剑指OffereⅡ 003 前n个数字二进制中1的个数","date":"2021-10-31T16:00:02.000Z","updated":"2021-11-08T09:01:12.793Z","comments":true,"path":"post/2.html","link":"","permalink":"http://atommudan.cn/post/2.html","excerpt":"","text":"剑指 Offer II 003. 前 n 个数字二进制中 1 的个数题目：难度 简单 通过率 78.3%给定一个非负整数 n ，请计算 0 到 n 之间的每个数字的二进制表示中 1 的个数，并输出一个数组。 示例 1： 输入: n = 2输出: [0,1,1]解释:0 $\\rightarrow$ 01 $\\rightarrow$ 12 $\\rightarrow$10 示例 2： 输入: n = 5输出: [0,1,1,2,1,2]解释:0 $\\rightarrow$ 01 $\\rightarrow$ 12 $\\rightarrow$ 103 $\\rightarrow$ 114 $\\rightarrow$ 1005 $\\rightarrow$ 101 说明 : 0 &lt;= n &lt;= 10^5 进阶: 给出时间复杂度为 O(n*sizeof(integer)) 的解答非常容易。但你可以在线性时间 O(n) 内用一趟扫描做到吗？ 要求算法的空间复杂度为 O(n) 。 你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的 __builtin_popcount ）来执行此操作。 默认代码 class Solution { public int[] countBits(int n) { } } 解法一：动态规划【最低有效位】——$O(N)$​思路分析 通过逻辑分析可以发现数字与包含1个数的规律 代码实现 class Solution { public int[] countBits(int n) { int[] result = new int[n + 1]; for (int i = 1; i &lt;= n; i ++) { result[i] = result[i / 2] + (i%2); } return result; } }","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"http://atommudan.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"http://atommudan.cn/tags/LeetCode/"},{"name":"easy","slug":"easy","permalink":"http://atommudan.cn/tags/easy/"},{"name":"整数","slug":"整数","permalink":"http://atommudan.cn/tags/%E6%95%B4%E6%95%B0/"},{"name":"动态规划","slug":"动态规划","permalink":"http://atommudan.cn/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}],"author":"mudan"},{"title":"剑指 Offer II 002. 二进制加法","slug":"剑指OffereⅡ 002 二进制加法","date":"2021-10-31T16:00:01.000Z","updated":"2021-11-08T09:00:25.358Z","comments":true,"path":"post/1.html","link":"","permalink":"http://atommudan.cn/post/1.html","excerpt":"","text":"剑指 Offer II 002. 二进制加法题目：难度 简单 通过率 56.7%给定两个 01 字符串 a 和 b ，请计算它们的和，并以二进制字符串的形式输出。 输入为 非空 字符串且只包含数字 1 和 0。 示例 1： 输入: a = “11”, b = “10”输出: “101” 示例 2： 输入: a = “1010”, b = “1011”输出: “10101” 提示： 每个字符串仅由字符 '0' 或 '1' 组成。 1 &lt;= a.length, b.length &lt;= 10^4 字符串如果不是 \"0\" ，就都不含前导零。 默认代码 class Solution { public String addBinary(String a, String b) { } } 解法一：模拟思路分析 从低位到高位循环做加法 注意进位 拼接后最终结果要反转 代码实现 class Solution { public String addBinary(String a, String b) { int i = a.length() - 1; int j = b.length() - 1; int carry = 0;//进位数值 StringBuilder result = new StringBuilder(); //循环条件说明：a、b有一方未遍历完成，或有进位 while(i >= 0 || j >=0 || carry != 0) { //求该位a,b的值与进位一起求和 //这种写法值得记录 int numA = i >= 0 ? a.charAt(i --) - '0' : 0; int numB = j >= 0 ? b.charAt(j --) - '0' : 0; int sum = numA + numB + carry; //计算本位运算的【进位】与【该位】的值，并拼接【该位】 carry = sum >= 2 ? 1 : 0; sum = sum >= 2 ? sum - 2 : sum; result.append(sum); } //输出的时候反转 return result.reverse().toString(); } }","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"http://atommudan.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"http://atommudan.cn/tags/LeetCode/"},{"name":"easy","slug":"easy","permalink":"http://atommudan.cn/tags/easy/"},{"name":"整数","slug":"整数","permalink":"http://atommudan.cn/tags/%E6%95%B4%E6%95%B0/"}],"author":"mudan"},{"title":"剑指 Offer II 001. 整数除法","slug":"剑指OffereⅡ 001 整数除法","date":"2021-10-31T16:00:00.000Z","updated":"2021-11-08T08:57:39.284Z","comments":true,"path":"post/0.html","link":"","permalink":"http://atommudan.cn/post/0.html","excerpt":"","text":"剑指 Offer II 001. 整数除法题目：难度 简单 通过率 20%给定两个整数 a 和 b ，求它们的除法的商 a/b ，要求不得使用乘号 '*'、除号 '/' 以及求余符号 '%' 。 注意： 整数除法的结果应当截去（truncate）其小数部分，例如：truncate(8.345) = 8 以及 truncate(-2.7335) = -2 假设我们的环境只能存储 32 位有符号整数，其数值范围是 [$-2^{31}$，$2^{31}−1$]。本题中，如果除法结果溢出，则返回 $2^{31} − 1$ 示例 1： 输入：a = 15, b = 2输出：7解释：15/2 = truncate(7.5) = 7 示例 2： 输入：a = 7, b = -3输出：-2解释：7/-3 = truncate(-2.33333..) = -2 示例 3： 输入：a = 0, b = 1输出：0 示例 4： 输入：a = 1, b = 1输出：1 提示: $-2^{31}$ &lt;= a, b &lt;=$-2^{31}-1$ b != 0 默认代码 class Solution { public int divide(int a, int b) { } } 解法一：递归+二分思路分析 一种朴素的解法是整数除法循环作减法，但是只要提交过就会发现，当用例足够极端的时候会导致$O(N)$的时间复杂度也不够看 为此，我们很容易想到用二分加速运算。既然循环做减法不可以，那我们可以从提高除数的角度入手，即每次做减法的时候自增减数，以达到加速运算的目的 代码实现 class Solution { public int divide(int a, int b) { if (a == 0) return 0; if (a == Integer.MIN_VALUE &amp;&amp; b == -1) return Integer.MAX_VALUE; int flag = 1; if ((a > 0 &amp;&amp; b &lt; 0) || (a &lt; 0 &amp;&amp; b > 0)) flag = -1; a = a > 0 ? -a : a; b = b > 0 ? -b : b; int result = speedUp(a, b); return flag == 1 ? result : -result; } public int speedUp(int a, int b) { if (a >= b) return a > b ? 0 : 1; int count = 1; int res = 0; int tB = b; while (a &lt;= tB &amp;&amp; tB &lt; 0) { a -= tB; res += count; tB += tB; count += count; } return res + speedUp(a, b); } }","categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"http://atommudan.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"http://atommudan.cn/tags/LeetCode/"},{"name":"easy","slug":"easy","permalink":"http://atommudan.cn/tags/easy/"},{"name":"整数","slug":"整数","permalink":"http://atommudan.cn/tags/%E6%95%B4%E6%95%B0/"}],"author":"mudan"}],"categories":[{"name":"数据结构与算法","slug":"数据结构与算法","permalink":"http://atommudan.cn/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"LeetCode","slug":"LeetCode","permalink":"http://atommudan.cn/tags/LeetCode/"},{"name":"easy","slug":"easy","permalink":"http://atommudan.cn/tags/easy/"},{"name":"整数","slug":"整数","permalink":"http://atommudan.cn/tags/%E6%95%B4%E6%95%B0/"},{"name":"动态规划","slug":"动态规划","permalink":"http://atommudan.cn/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}]}